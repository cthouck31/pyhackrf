#!/usr/bin/env python

from pyhackrf import pyhackrf
from pyhackrf.pyhackrf import (HackRfError, HackRfVendorRequest,
                               HackRfConstants, HackRfTransceiverMode)

import numpy as np

from threading import Thread

import os
import time
import ctypes
import signal
import argparse
import cmd
import logging

logging.basicConfig()
logger = logging.getLogger("HackRF CLT")
logger.setLevel(logging.DEBUG)


class Measurement(ctypes.Structure):
    _fields_ = \
        [
            ("value", ctypes.c_float),
            ("count", ctypes.c_uint),
        ]


def callback_power_measurement(hackrf_transfer):
    arrayType = (ctypes.c_byte * hackrf_transfer.contents.valid_length)
    values = ctypes.cast(hackrf_transfer.contents.buffer, ctypes.POINTER(arrayType)).contents
    iq = np.empty(len(values)//2, 'complex')
    iq.real, iq.imag = values[::2], values[1::2]
    iq /= 128.0

    power = np.sum(np.power(np.abs(iq), 2)) / len(iq)

    ptrPowerVal = ctypes.cast(hackrf_transfer.contents.rx_ctx, ctypes.POINTER(Measurement))
    ptrPowerVal.contents.value += power
    ptrPowerVal.contents.count += 1

    return 0


MAX_FFT_SIZE = 16384

class SpectrumSnapshot(ctypes.Structure):
    _fields_ = \
        [
            ("buffer", ctypes.c_float*MAX_FFT_SIZE),
            ("nfft", ctypes.c_uint),
            ("count", ctypes.c_uint),
            ("window", ctypes.c_float*MAX_FFT_SIZE),
        ]


def callback_spectrum_snapshot(hackrf_transfer):
    arrayType = (ctypes.c_byte * hackrf_transfer.contents.valid_length)
    values = ctypes.cast(hackrf_transfer.contents.buffer, ctypes.POINTER(arrayType)).contents
    iq = np.empty(len(values)//2, 'complex')
    iq.real, iq.imag = values[::2], values[1::2]
    iq /= 128.0

    snap = ctypes.cast(hackrf_transfer.contents.rx_ctx, ctypes.POINTER(SpectrumSnapshot))

    nfft = snap.contents.nfft

    for k in range(0, len(iq), nfft):
        nBlock = min([len(iq)-k, nfft])
        chunk  = iq[k : k+nBlock]
        chunk  = [snap.contents.window[m]*iq[m] for m in range(nBlock)]
        Y      = np.fft.fftshift(np.abs(np.fft.fft(chunk, nfft)))
        for n in range(nfft):
            snap.contents.buffer[n] += float(Y[n])

        snap.contents.count += 1

    return 0

class HackRfCLT(cmd.Cmd):
    def preloop(self):
        self.prompt = "hackrf-clt $> "
        self.hackrf = pyhackrf.HackRf()

        self.reset()

    def postloop(self):
        self.hackrf.exit()

    def default(self, line):
        pass

    def reset(self):
        """
        Reset to initial conditions.
        Allows the device to be configured from a known point.
        """

        if self.hackrf.is_streaming():
            self.hackrf.stop_rx_mode()

        self._freq      = 10e6
        self._rate      = 1e6
        self._lnaGain   = 0.0
        self._vgaGain   = 0.0
        self._txVgaGain = 0.0

        success = HackRfError.HACKRF_SUCCESS

        if self.hackrf.set_freq(self._freq) != success:
            logger.error("Failed to reset RF Frequency.")
            self._freq = -1
        if self.hackrf.set_sample_rate(self._rate) != success:
            logger.error("Failed to reset Sample Rate.")
            self._rate = -1
        if self.hackrf.set_lna_gain(self._lnaGain) != success:
            logger.error("Failed to reset LNA Gain.")
            self._lnaGain = -1
        if self.hackrf.set_vga_gain(self._vgaGain) != success:
            logger.error("Failed to reset RX VGA GAin.")
            self._vgaGain = -1
        if self.hackrf.set_txvga_gain(self._txVgaGain) != success:
            logger.error("Failed to reset TX VGA Gain.")
            self._txVgaGain = -1

    def do_exit(self, line):
        """
        Exit the HackRf command line tool.

            exit

        """
        return True

    def __parseLine(self, line, delim=" "):
        """
        Parse a line into a list.
        """
        args = line.rstrip(delim).lstrip(delim).split(delim)
        args = [arg for arg in args if (arg not in [" ",""])]
        return args

    def __convertFloat(self, line):
        """
        Convert to a float.
        """
        try:
            value = float(line)
        except Exception as e:
            logger.error("Failed to convert to float.")
            value = -1

        return value

    def __convertInt(self, line):
        """
        Convert to an integer.
        """
        try:
            value = int(line)
        except Exception as e:
            logger.error("Failed to convert to integer.")
            value = -1

        return value

    def __printline(self, line):
        """
        Private print function.
        """
        print "    %s" % line

    #############################################################
    # Command line functions.
    #############################################################

    def do_clear(self, line):
        """
        Clear current terminal text.

            clear
        """
        os.system("clear")

    def do_ls(self, line):
        """
        Passthrough for 'ls' function (Linux).

            ls [options]
        """
        line = line.rstrip(" ").lstrip(" ")
        os.system("ls %s" % line)
        
    #############################################################
    # Control functions.
    #############################################################

    def do_setup(self, line):
        """
        Setup the HackRf device (set up on entry, only use this if the device was closed).

            setup
        """
        if self.hackrf.setup() != HackRfError.HACKRF_SUCCESS:
            logger.error("Failed to setup device.")


    def do_open(self, line):
        """
        Open the HackRf device.

            open
        """
        ret = self.hackrf.open()
        if ret != HackRfError.HACKRF_SUCCESS:
            logger.error("Failed to open device.")

    def do_board_id_read(self, line):
        """
        Get board ID from device.

            board_id_read
        """
        bid = self.hackrf.board_id_read()
        if bid < 0:
            logger.warning("Failed to retrieve board ID.")
            return

        self.__printline("Board ID: %s" % bid)

    def do_version_string_read(self, line):
        """
        Get version string from board.

            version_string_read
        """
        vstring = self.hackrf.version_string_read()
        if vstring is None:
            logger.warning("Failed to retrieve version string.")
            return

        self.__printline("Version String: %s" % vstring)

    def do_is_streaming(self, line):
        """
        Check if device is currently streaming IQ.

            is_streaming
        """
        streaming = self.hackrf.is_streaming()
        self.__printline("Streaming: %s" % str(streaming))

    def do_set_freq(self, line):
        """
        Set front-end RF frequency (in Hz).

            set_freq <freq_hz>

        Args:
            freq_hz (float): Desired frequency to tune to in [Hz].
        """
        args = self.__parseLine(line)
        if len(args) != 1:
            logger.warning("Incorrect number of arguments (%d != 1)." % len(args))
            return

        freq = self.__convertFloat(args[0])
        if freq >= 0:
            ret = self.hackrf.set_freq(freq)
            if ret != HackRfError.HACKRF_SUCCESS:
                logger.error("Failed to set parameter.")
                return

            self._freq = freq

    def do_set_sample_rate(self, line):
        """
        Set sample rate of device (in Hz).

            set_sample_rate <rate>

        Args:
            rate (float): Desired sample rate (in Hz).
                          Converted from 'float' to 'int' in this function for
                          compatibility with 'libhackrf' call.
        """
        args = self.__parseLine(line)
        if len(args) != 1:
            logger.warning("Incorrect number of arguments (%d != 1)." % len(args))
            return

        value = self.__convertFloat(args[0])
        if value >= 0:
            ret = self.hackrf.set_sample_rate(value)
            if ret != HackRfError.HACKRF_SUCCESS:
                logger.error("Failed to set parameter.")
                return

            self._rate = value


    def do_set_lna_gain(self, line):
        """
        Set the LNA (low-noise amplifier) gain (in dB).

            set_lna_gain <gain>

        Args:
            gain (float): Front-end LNA gain desired (range: 0-40 [dB] in 8 [dB] steps).
                          Rounded to closest 8 [dB] step and converted from 'float' to
                          'int' for compatibility with 'libhackrf' call.
        """
        args = self.__parseLine(line)
        if len(args) != 1:
            logger.warning("Incorrect number of arguments (%d != 1)." % len(args))
            return

        value = self.__convertFloat(args[0])
        if value >= 0:
            ret = self.hackrf.set_lna_gain(value)
            if ret != HackRfError.HACKRF_SUCCESS:
                logger.error("Failed to set parameter.")
                return

            self._lnaGain = value

    def do_set_vga_gain(self, line):
        """
        Set the RX VGA (variable-gain amplifier) gain (in dB).

            set_vga_gain <gain>

        Args:
            gain (float): VGA gain desired (range: 0-62 [dB] in 2 [dB] steps).
                          Rounded to closest 2 [dB] step and converted from 'float' to
                          'int' for compatibility with 'libhackrf' call.
        """
        args = self.__parseLine(line)
        if len(args) != 1:
            logger.warning("Incorrect number of arguments (%d != 1)." % len(args))
            return

        value = self.__convertFloat(args[0])
        if value >= 0:
            ret = self.hackrf.set_vga_gain(value)
            if ret != HackRfError.HACKRF_SUCCESS:
                logger.error("Failed to set parameter.")
                return

            self._vgaGain = value

    def do_set_txvga_gain(self, line):
        """
        Set the TX VGA (variable-gain amplifier) gain (in dB).

        Args:
            gain (float): TX VGA gain desired (range: 0-47 [dB] in 1 [dB] steps).
                          Rounded to closest 1 [dB] step and converted from 'float' to
                          'int' for compatibility with 'libhackrf' call.
        """
        args = self.__parseLine(line)
        if len(args) != 1:
            logger.warning("Incorrect number of arguments (%d != 1)." % len(args))
            return

        value = self.__convertFloat(args[0])
        if value >= 0:
            ret = self.hackrf.set_txvga_gain(value)
            if ret != HackRfError.HACKRF_SUCCESS:
                logger.error("Failed to set parameter.")
                return

            self._txVgaGain = value

    def do_antenna_enable(self, line):
        """
        Set antenna enable flag.

            antenna_enable
        """
        ret = self.hackrf.set_antenna_enable(True)

    def do_antenna_disable(self, line):
        """
        Unset antenna enable flag.

            antenna_disable
        """
        ret = self.hackrf.set_antenna_enable(False)

    def do_amp_enable(self, line):
        """
        Set external amplifier enable flag.

            amp_enable
        """
        ret = self.hackrf.set_amp_enable(True)

    def do_amp_disable(self, line):
        """
        Unset external amplifier enable flag.

            amp_disable
        """
        ret = self.hackrf.set_amp_enable(False)

    def do_set_baseband_filter_bw(self, line):
        """
        Set baseband filter bandwidth (in Hz).

            set_baseband_filter_bw <bw_hz>

        Args:
            bw_hz (float): Filter bandwidth (in Hz).
                           Converted from 'float' to 'int' in this function for
                           compatibility with 'libhackrf' call.
        """
        args = self.__parseLine(line)
        if len(args) != 1:
            logger.warning("Incorrect number of arguments (%d != 1)." % len(args))
            return

        value = self.__convertFloat(args[0])
        if value >= 0:
            ret = self.hackrf.set_baseband_filter_bandwidth(value)
            if ret != HackRfError.HACKRF_SUCCESS:
                logger.error("Failed to set parameter.")

    def do_get_config(self, line):
        """
        Print current HackRF configuration.

            get_config
        """
        print ("HackRF Configuration:\n")
        print ("   RF Frequency:   %.3f [kHz]" % (self._freq*1e-3))
        print ("   Sample Rate:    %.3f [MHz]" % (self._rate*1e-6))
        print ("   LNA Gain:       %.1f [dB]" % (self._lnaGain))
        print ("   RX VGA Gain:    %.1f [dB]" % (self._vgaGain))
        print ("   TX VGA Gain:    %.1f [dB]" % (self._txVgaGain))

    #############################################################
    # Utility functions.
    #############################################################

    def do_set_max_lna(self, line):
        """
        Set LNA to maximum available gain (40 dB).

            set_max_lna
        """
        self.do_set_lna_gain("40")

    #############################################################
    # Test functions.
    #############################################################

    def do_measure_power(self, line):
        """
        Measure power observed at front-end with current configuration.

            measure_power <time>

        Args:
            time (float): Number of seconds over which to perform measurement (<60) (default = 3).
        """
        args = self.__parseLine(line)
        if len(args) == 0:
            # Default time.
            timeDur = 3
        elif len(args) > 1:
            logger.warning("Incorrect number of arguments (0 or 1 argument required).")
            return
        else:
            # User-defined time.
            timeDur = self.__convertFloat(args[0])
            if (timeDur <= 0) or (timeDur > 60):
                logger.error("Duration must be > 0 and <= 60 seconds.")
                return

        self.__printline("Starting power measurement (%.2f [sec])..." % timeDur)
        powerMeas = Measurement()
        powerMeas.value = 0
        powerMeas.count = 0
        self.hackrf.start_rx_mode(callback_power_measurement,
                                  obj=ctypes.cast(ctypes.byref(powerMeas), ctypes.c_void_p))

        # Allow callback to run for 'N' seconds.
        time.sleep(timeDur)
        self.hackrf.stop_rx_mode()

        # Compute average power.
        avgPower = powerMeas.value / powerMeas.count

        self.__printline("Power: %.3f [dB] (%u [meas])" % (10*np.log10(avgPower), powerMeas.count))

    def do_spectrum_snapshot(self, line):
        """
        Take a snapshot of the current spectrum.

            spectrum_snapshot <time> <fft_size> <window type>

        Args:
            time (float): Number of seconds over which to perform measurement (<60) (default = 3).
            fft_size (int): Size of the snapshot FFT (dictates frequency resolution).
            window (str): Type of window to apply to the periodogram (['ones', 'hamming']).
        """
        TIME_DFLT = 3
        NFFT_DFLT = 2048
        WIND_DFLT = "Hamming"


        args = self.__parseLine(line)
        if len(args) == 0:
            # Default time, FFT size, and window type.
            timeDur  = TIME_DFLT
            nfft     = NFFT_DFLT
            windType = WIND_DFLT
        if len(args) >= 1:
            # Time only.
            timeDur = self.__convertFloat(args[0])
            if (timeDur <= 0) or (timeDur > 60):
                logger.error("Duration must be > 0 and <= 60 seconds.")
                return
            nfft    = NFFT_DFLT
            windType = WIND_DFLT
        if len(args) >= 2:
            nfft    = self.__convertInt(args[1])
            if nfft <= 0:
                logger.error("Failed to set FFT size (%d)." % nfft)
                return
            windType = WIND_DFLT
        if len(args) == 3:
            windType = str(args[2]).lower()
        if len(args) > 3:
            logger.error("Too many arguments (0 to 3 expected).")
            return

        if windType == "ones":
            window = np.ones(nfft)
            windType = "Ones"
        else:
            window = np.hamming(nfft)

        self.__printline("Starting spectrum snapshot (%.2f [sec], FFT size: %d, Window: %s)..." %
                         (timeDur, nfft, windType))
        snap = SpectrumSnapshot()
        snap.nfft  = nfft
        snap.count = 0
        for n in range(snap.nfft):
            snap.buffer[n] = 0
            snap.window[n] = window[n]

        self.hackrf.start_rx_mode(callback_spectrum_snapshot,
                                  obj=ctypes.cast(ctypes.byref(snap), ctypes.c_void_p))

        # Allow callback to run for 'N' seconds.
        time.sleep(timeDur)
        self.hackrf.stop_rx_mode()

        try:
            import matplotlib.pyplot as plt
        except Exception as e:
            logger.error("Failed to import \'matplotlib.pyplot\', skipping plots...")
            return

        G  = 1.0 / (snap.count*snap.nfft)
        Fs = self._rate
        f  = (np.linspace(-Fs/2.0, Fs/2.0, snap.nfft) + self._freq) * 1e-6
        Y  = [snap.buffer[n]*G for n in range(snap.nfft)]
        Ylog = 20*np.log10(np.abs(Y))

        plt.figure()
        ax = plt.gca()
        ax.set_axis_bgcolor('k')
        plt.plot(f, Ylog, 'g')
        plt.title("Spectrum Snapshot")
        plt.xlabel("Frequency [MHz]")
        plt.ylabel("Amplitude [dB]")
        plt.axis([min(f), max(f), min(Ylog), max(Ylog)])
        plt.grid(1, color='w')
        plt.show()



if __name__ == "__main__":

    cmdLine = HackRfCLT()

    cmdLine.cmdloop()
